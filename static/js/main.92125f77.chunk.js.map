{"version":3,"sources":["InfoBox.js","Table.js","utilities.js","Graph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Table","countries","map","country","sortData","data","sorted","sort","a","b","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","Graph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","coun","setCoun","countryInfo","setCountryInfo","tableData","setTableData","setCasesType","r","d","responce","c","name","iso2","newData","getCountriesData","goChange","e","ct","target","url","console","log","FormControl","Select","variant","onChange","MenuItem","onClick","todayCases","todayRecovered","recovered","todayDeaths","deaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92125f77.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card,CardContent,Typography } from '@material-ui/core';\r\nfunction InfoBox({title,cases,total}) {\r\n   return (\r\n \r\n         <Card className=\"infoBox\">\r\n         <CardContent>\r\n         <Typography className=\"infoBox_title\"color=\"textSecondary\">\r\n               {title}\r\n            </Typography>\r\n            <h2 className=\"infoBox_cases\">\r\n               {cases} \r\n            </h2>\r\n            <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n               {total} Total\r\n            </Typography>\r\n         </CardContent>\r\n         </Card>\r\n\r\n   )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport './Table.css'\r\nfunction Table({countries}) {\r\n   return (\r\n      <div className=\"table\">\r\n         {\r\n            countries.map(({country,cases})=>(\r\n                  <tr>\r\n                     <td>\r\n                        {country}\r\n                     </td>\r\n                     <td>\r\n                        <strong>{cases}</strong>\r\n                     </td>\r\n                  </tr> \r\n            ))\r\n         }\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Table\r\n","export const sortData=(data)=>{\r\n   const sorted=[...data]\r\n   sorted.sort((a,b)=>{\r\n      if(a.cases >b.cases){\r\n         return -1\r\n      }else{\r\n         return 1;\r\n      }\r\n   })\r\n   return sorted\r\n}","import React,{useState,useEffect} from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\nimport numeral from \"numeral\";\r\nconst options = {//to get value when we hover it\r\n   legend: {\r\n     display: false,\r\n   },\r\n   elements: {\r\n     point: {\r\n       radius: 0,\r\n     },\r\n   },\r\n   maintainAspectRatio: false,\r\n   tooltips: {\r\n     mode: \"index\",\r\n     intersect: false,\r\n     callbacks: {\r\n       label: function (tooltipItem, data) {\r\n         return numeral(tooltipItem.value).format(\"+0,0\");\r\n       },\r\n     },\r\n   },\r\n   scales: {\r\n     xAxes: [\r\n       {\r\n         type: \"time\",\r\n         time: {\r\n           format: \"MM/DD/YY\",\r\n           tooltipFormat: \"ll\",\r\n         },\r\n       },\r\n     ],\r\n     yAxes: [\r\n       {\r\n         gridLines: {\r\n           display: false,\r\n         },\r\n         ticks: {\r\n           // Include a dollar sign in the ticks\r\n           callback: function (value, index, values) {\r\n             return numeral(value).format(\"0a\");//hover action is because of numeral   \r\n           },\r\n         },\r\n       },\r\n     ],\r\n   },\r\n };\r\n const buildChartData = (data, casesType) => {\r\n   let chartData = [];\r\n   let lastDataPoint;\r\n   for (let date in data.cases) {\r\n     if (lastDataPoint) {\r\n       let newDataPoint = {\r\n         x: date,\r\n         y: data[casesType][date] - lastDataPoint,\r\n       };\r\n       chartData.push(newDataPoint);\r\n     }\r\n     lastDataPoint = data[casesType][date];\r\n   }\r\n   return chartData;\r\n };\r\nfunction Graph({casesType}) {\r\n   const [data, setData] = useState({});\r\n\r\n   useEffect(() => {\r\n     const fetchData = async () => {\r\n       await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=100\")\r\n         .then((response) => {\r\n           return response.json();\r\n         })\r\n         .then((data) => {\r\n           let chartData = buildChartData(data, casesType);\r\n           setData(chartData);\r\n           // buildChart(chartData);\r\n         });\r\n     };\r\n \r\n     fetchData();\r\n   }, [casesType]);\r\n \r\n   return (\r\n     <div>\r\n       {data?.length > 0 && (//optional Jlink checks whether data exsist or not\r\n         <Line\r\n           data={{\r\n             datasets: [\r\n               {\r\n                 backgroundColor: \"rgba(209, 16, 52, 0.5)\",\r\n                 borderColor: \"#CC1034\",\r\n                 data: data,\r\n               },\r\n             ],\r\n           }}\r\n           options={options}\r\n         />\r\n       )}\r\n     </div>\r\n   );\r\n}\r\nexport default Graph\r\n","import { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\nimport './App.css';\nimport { useState, React, useEffect } from 'react'\nimport InfoBox from './InfoBox';\nimport Table from './Table'\nimport {sortData} from './utilities'\nimport Graph from './Graph'\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [coun, setCoun] = useState(\"Worldwide\")\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData,setTableData] = useState([])\n  const [casesType, setCasesType] = useState(\"cases\");\n  //to render initial Worlwide cases\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all').then(r => r.json()).then(d => {\n      setCountryInfo(d)\n    })\n  }, [])\n  //table\n\n  //  drop down\n  useEffect(() => {//its runs when component loads and state var chances\n    //async ->send a req ,wait for server to send back\n    const getCountriesData = async () => {\n      await fetch(\n        \"https://disease.sh/v3/covid-19/countries\"\n      ).then(responce => responce.json()).then(data => {\n        const countries = data.map(c => (\n          {\n            name: c.country,\n            value: c.countryInfo.iso2,\n          }\n        ))\n        const newData=sortData(data)\n        setCountries(countries)\n        setTableData(newData)\n        \n      })\n    }\n    getCountriesData()//calling async function\n  }, [])\n\n  const goChange = async (e) => {\n    const ct = e.target.value\n    //to get cases as per countries\n    const url = ct === 'Worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${ct}`\n\n    await fetch(url).then(r => r.json()).then(d => {\n      setCoun(ct)\n      setCountryInfo(d)//data from country responce\n    })\n  }\n  console.log(\"info:\", countryInfo)\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app_drop\">\n            <Select  //to create menu bar\n              variant=\"outlined\"\n              onChange={goChange}\n              value={coun}\n            >\n              {/* menu items */}\n              <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n              {countries.map(\n                (c) => (\n                  <MenuItem value={c.value} key={c.value}>{c.name}</MenuItem>\n                )\n              )\n              }\n            </Select>\n          </FormControl>\n        </div>\n        {/* infobox */}\n        <div className=\"app_info\">\n          <InfoBox onClick={(e) => setCasesType(\"cases\")} title=\"Cases\" cases={countryInfo.todayCases} total={countryInfo.cases} />\n          <InfoBox  onClick={(e) => setCasesType(\"recovered\")} title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} />\n          <InfoBox onClick={(e) => setCasesType(\"deaths\")} title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} />\n        </div>\n        {/* map */}\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Covid Update</h3>\n          <Table countries={tableData}/>\n          <h3>Worldwide new cases</h3>\n          {/* graph */}\n           <Graph casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}